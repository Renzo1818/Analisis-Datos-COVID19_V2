/*
  AUTOR: RenzoZ
  OBJETIVO: CREAR LOS RESPECTIVOS PAQUETES QUE SIRVEN DE MANTENIMIENTO PARA CADA DE LAS TABLAS. ESTE MANTENIENTO CONSISTE EN LA INSERCCIÓN, ACTUALIZACIÓN Y ELIMINACION DE DATOS A TRAVES DE STORE PROCEDURE
*/


-- CREACION DEL ENCABEZADO DEL PAQUETE PQ_MANTENIMIENTO_GRUPO_RIESGO

CREATE OR REPLACE PACKAGE PQ_MANTENIMIENTO_GRUPO_RIESGO
IS
--
PROCEDURE SP_INSERTAR_GRUPO_RIESGO(P_TIPO_GRUPO GRUPO_RIESGO.TIPO_GRUPO%TYPE);
--
PROCEDURE SP_MODIFICAR_GRUPO_RIESGO(P_TIPO_GRUPO GRUPO_RIESGO.TIPO_GRUPO%TYPE, P_COD_GRUPO GRUPO_RIESGO.COD_GRUPO%TYPE);
--
PROCEDURE SP_ELIMINAR_GRUPO_RIESGO(P_COD_GRUPO GRUPO_RIESGO.COD_GRUPO%TYPE);
--
END;


-- CREACION DEL CUERPO DEL PAQUETE PQ_MANTENIMIENTO_GRUPO_RIESGO

CREATE OR REPLACE PACKAGE BODY PQ_MANTENIMIENTO_GRUPO_RIESGO
IS
--
    PROCEDURE SP_INSERTAR_GRUPO_RIESGO(P_TIPO_GRUPO GRUPO_RIESGO.TIPO_GRUPO%TYPE)
    IS
    BEGIN
        INSERT INTO GRUPO_RIESGO(COD_GRUPO, TIPO_GRUPO)
        VALUES(SEQ_GRUPO_RIESGO.NEXTVAL,P_TIPO_GRUPO);
        EXCEPTION
            WHEN OTHERS THEN
                RAISE_APPLICATION_ERROR(-20001, 'ERROR AL REGISTRAR UN NUEVO GRUPO DE RIESGO: ' || SQLERRM);
    END;
--
    PROCEDURE SP_MODIFICAR_GRUPO_RIESGO(P_TIPO_GRUPO GRUPO_RIESGO.TIPO_GRUPO%TYPE, P_COD_GRUPO GRUPO_RIESGO.COD_GRUPO%TYPE)
    IS
    BEGIN
        UPDATE GRUPO_RIESGO SET TIPO_GRUPO = P_TIPO_GRUPO WHERE COD_GRUPO = P_COD_GRUPO;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                RAISE_APPLICATION_ERROR(-20001, 'NO SE ENCONTRO EL GRUPO DE RIESGO CON ID: ' || TO_CHAR(P_COD_GRUPO));
            WHEN OTHERS THEN
                RAISE_APPLICATION_ERROR(-20001, 'ERROR AL ACTUALIZAR EL GRUPO DE RIESGO CON ID: ' || TO_CHAR(P_COD_GRUPO));
    END;
--
    PROCEDURE SP_ELIMINAR_GRUPO_RIESGO(P_COD_GRUPO GRUPO_RIESGO.COD_GRUPO%TYPE)
    IS
    BEGIN
        DELETE GRUPO_RIESGO WHERE COD_GRUPO = P_COD_GRUPO;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                RAISE_APPLICATION_ERROR(-20001, 'NO SE ENCONTRO EL GRUPO DE RIESGO CON ID: ' || TO_CHAR(P_COD_GRUPO));
            WHEN OTHERS THEN
                RAISE_APPLICATION_ERROR(-20001, 'ERROR AL ELIMINAR EL GRUPO DE RIESGO CON ID: ' || TO_CHAR(P_COD_GRUPO));
    END;
--
END;






-- CREACION DEL ENCABEZADO DEL PAQUETE PQ_MANTENIMIENTO_FABRICANTE

CREATE OR REPLACE PACKAGE PQ_MANTENIMIENTO_FABRICANTE
IS
--
    PROCEDURE SP_INSERTAR_FABRICANTE(P_NOM_FABRICANTE FABRICANTE.NOM_FABRICANTE%TYPE);
--
    PROCEDURE SP_MODIFICAR_FABRICANTE(P_NOM_FABRICANTE FABRICANTE.NOM_FABRICANTE%TYPE, P_COD_FABRICANTE FABRICANTE.COD_FABRICANTE%TYPE);
--
    PROCEDURE SP_ELIMINAR_FABRICANTE(P_COD_FABRICANTE FABRICANTE.COD_FABRICANTE%TYPE);
--
END;


-- CREACION DEL CUERPO DEL PAQUETE PQ_MANTENIMIENTO_FABRICANTE

CREATE OR REPLACE PACKAGE BODY PQ_MANTENIMIENTO_FABRICANTE
IS
--
    PROCEDURE SP_INSERTAR_FABRICANTE(P_NOM_FABRICANTE FABRICANTE.NOM_FABRICANTE%TYPE)
    IS
    BEGIN
        INSERT INTO FABRICANTE(COD_FABRICANTE, NOM_FABRICANTE)
        VALUES(SEQ_FABRICANTE.NEXTVAL, P_NOM_FABRICANTE);
    EXCEPTION
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001, 'ERROR AL REGISTRAR UN NUEVO FABRICANTE: ' || SQLERRM);
    END;
--
    PROCEDURE SP_MODIFICAR_FABRICANTE(P_NOM_FABRICANTE FABRICANTE.NOM_FABRICANTE%TYPE, P_COD_FABRICANTE FABRICANTE.COD_FABRICANTE%TYPE)
    IS
    BEGIN
        UPDATE FABRICANTE SET NOM_FABRICANTE = P_NOM_FABRICANTE WHERE COD_FABRICANTE = P_COD_FABRICANTE;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20001, 'NO SE ENCONTRO AL FABRICANTE CON ID: ' || TO_CHAR(P_COD_FABRICANTE));
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001, 'ERROR AL MODIFICAR AL FABRICANTE CON ID: ' || TO_CHAR(P_COD_FABRICANTE));
    END;
--
    PROCEDURE SP_ELIMINAR_FABRICANTE(P_COD_FABRICANTE FABRICANTE.COD_FABRICANTE%TYPE)
    IS
    BEGIN
        DELETE FABRICANTE WHERE COD_FABRICANTE = P_COD_FABRICANTE;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20001, 'NO SE ENCONTRO AL FABRICANTE CON ID: ' || TO_CHAR(P_COD_FABRICANTE));
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001, 'ERROR AL MODIFICAR AL FABRICANTE CON ID: ' || TO_CHAR(P_COD_FABRICANTE));
    END;
--
END;






-- CREACION DEL ENCABEZADO DEL PAQUETE PQ_MANTENIMIENTO_METODO_DETECCION

CREATE OR REPLACE PACKAGE PQ_MANTENIMIENTO_METODO_DETECCION
IS
--
    PROCEDURE SP_INSERTAR_METODO_DETECCION(P_NOM_METODO METODO_DETECCION.NOM_METODO%TYPE);
--
    PROCEDURE SP_MODIFICAR_METODO_DETECCION(P_NOM_METODO METODO_DETECCION.NOM_METODO%TYPE, P_COD_METODO METODO_DETECCION.COD_METODO%TYPE);
--
    PROCEDURE SP_ELIMINAR_METODO_DETECCION(P_COD_METODO METODO_DETECCION.COD_METODO%TYPE);
--
END;


-- CREACION DEL CUERPO DEL PAQUETE PQ_MANTENIMIENTO_METODO_DETECCION

CREATE OR REPLACE PACKAGE BODY PQ_MANTENIMIENTO_METODO_DETECCION
IS
--
    PROCEDURE SP_INSERTAR_METODO_DETECCION(P_NOM_METODO METODO_DETECCION.NOM_METODO%TYPE)
    IS
    BEGIN
        INSERT INTO METODO_DETECCION(COD_METODO, NOM_METODO)
        VALUES(SEQ_METODO_DETECCION.NEXTVAL, P_NOM_METODO);
    EXCEPTION
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001, 'ERROR AL REGISTRAR UN NUEVO METODO DE DETECCION: ' || SQLERRM);
    END;
--
    PROCEDURE SP_MODIFICAR_METODO_DETECCION(P_NOM_METODO METODO_DETECCION.NOM_METODO%TYPE, P_COD_METODO METODO_DETECCION.COD_METODO%TYPE)
    IS
    BEGIN
        UPDATE METODO_DETECCION SET NOM_METODO = P_NOM_METODO WHERE COD_METODO = P_COD_METODO;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20001, 'NO SE ENCONTRO AL METODO DE DETECCION CON ID: ' || TO_CHAR(P_COD_METODO));
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001, 'ERROR AL MODIFICAR AL METODO DE DETECCION CON ID: ' || TO_CHAR(P_COD_METODO));
    END;
--
    PROCEDURE SP_ELIMINAR_METODO_DETECCION(P_COD_METODO METODO_DETECCION.COD_METODO%TYPE)
    IS
    BEGIN
        DELETE METODO_DETECCION WHERE COD_METODO = P_COD_METODO;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20001, 'NO SE ENCONTRO AL METODO DE DETECCION CON ID: ' || TO_CHAR(P_COD_METODO));
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001, 'ERROR AL MODIFICAR AL METODO DE DETECCION CON ID: ' || TO_CHAR(P_COD_METODO));
    END;
--
END;






-- CREACION DEL ENCABEZADO DEL PAQUETE PQ_MANTENIMIENTO_DIRESA

CREATE OR REPLACE PACKAGE PQ_MANTENIMIENTO_DIRESA
IS
--
    PROCEDURE SP_INSERTAR_DIRESA(P_CENTRO_DIRESA DIRESA.CENTRO_DIRESA%TYPE);
--
    PROCEDURE SP_MODIFICAR_DIRESA(P_CENTRO_DIRESA DIRESA.CENTRO_DIRESA%TYPE, P_COD_DIRESA DIRESA.COD_DIRESA%TYPE);
--
    PROCEDURE SP_ELIMINAR_DIRESA(P_COD_DIRESA DIRESA.COD_DIRESA%TYPE);
--
END;


-- CREACION DEL CUERPO DEL PAQUETE PQ_MANTENIMIENTO_DIRESA

CREATE OR REPLACE PACKAGE BODY PQ_MANTENIMIENTO_DIRESA
IS
--
    PROCEDURE SP_INSERTAR_DIRESA(P_CENTRO_DIRESA DIRESA.CENTRO_DIRESA%TYPE)
    IS
    BEGIN
        INSERT INTO DIRESA(COD_DIRESA, CENTRO_DIRESA)
        VALUES(SEQ_DIRESA.NEXTVAL, P_CENTRO_DIRESA);
    EXCEPTION
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001, 'ERROR AL REGISTRAR UN NUEVO CENTRO DE DIRESA: ' || SQLERRM);
    END;
--
    PROCEDURE SP_MODIFICAR_DIRESA(P_CENTRO_DIRESA DIRESA.CENTRO_DIRESA%TYPE, P_COD_DIRESA DIRESA.COD_DIRESA%TYPE)
    IS
    BEGIN
        UPDATE DIRESA SET CENTRO_DIRESA = P_CENTRO_DIRESA WHERE COD_DIRESA = P_COD_DIRESA;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20001, 'NO SE ENCONTRO EL CENTRO DE DIRESA CON ID: ' || TO_CHAR(P_COD_DIRESA));
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001, 'ERROR AL MODIFICAR EL CENTRO DE DIRESA CON ID: ' || TO_CHAR(P_COD_DIRESA));
    END;
--
    PROCEDURE SP_ELIMINAR_DIRESA(P_COD_DIRESA DIRESA.COD_DIRESA%TYPE)
    IS
    BEGIN
        DELETE DIRESA WHERE COD_DIRESA = P_COD_DIRESA;
    EXCEPTION
         WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20001, 'NO SE ENCONTRO EL CENTRO DE DIRESA CON ID: ' || TO_CHAR(P_COD_DIRESA));
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001, 'ERROR AL MODIFICAR EL CENTRO DE DIRESA CON ID: ' || TO_CHAR(P_COD_DIRESA));
    END;
--
END;






-- CREACION DEL ENCABEZADO DEL PAQUETE PQ_MANTENIMIENTO_PERSONA

CREATE OR REPLACE PACKAGE PQ_MANTENIMIENTO_PERSONA
IS
--
    PROCEDURE SP_INSERTAR_PERSONA(P_COD_UUID PERSONA.COD_UUID%TYPE, P_SEXO PERSONA.SEXO%TYPE, P_EDAD PERSONA.EDAD%TYPE, P_COD_UBIGEO PERSONA.COD_UBIGEO%TYPE);
--
    PROCEDURE SP_MODIFICAR_PERSONA(P_SEXO PERSONA.SEXO%TYPE, P_EDAD PERSONA.EDAD%TYPE, P_COD_UBIGEO PERSONA.COD_UBIGEO%TYPE, P_COD_UUID PERSONA.COD_UUID%TYPE);
--
    PROCEDURE SP_ELIMINAR_PERSONA(P_COD_UUID PERSONA.COD_UUID%TYPE);
--
END;


-- CREACION DEL CUERPO DEL PAQUETE PQ_MANTENIMIENTO_PERSONA
-- VERIFICACION PREVIA DE EXISTENCIA DE FOREIGN KEYS EN SUS RESPECTIVAS TABLAS
-- USO DE LA FUNCION NVL PARA MANEJAR VALORES NULOS

CREATE OR REPLACE PACKAGE BODY PQ_MANTENIMIENTO_PERSONA
IS
--
    PROCEDURE SP_INSERTAR_PERSONA(P_COD_UUID PERSONA.COD_UUID%TYPE, P_SEXO PERSONA.SEXO%TYPE, P_EDAD PERSONA.EDAD%TYPE, P_COD_UBIGEO PERSONA.COD_UBIGEO%TYPE)
    IS
        V_UBIGEO_EXISTE NUMBER;
    BEGIN
        IF P_COD_UBIGEO IS NOT NULL THEN
            SELECT COUNT(1) INTO V_UBIGEO_EXISTE FROM DISTRITO WHERE COD_UBIGEO = P_COD_UBIGEO;
        
            IF V_UBIGEO_EXISTE = 0 THEN
                 RAISE_APPLICATION_ERROR(-20001, 'El COD_UBIGEO NO EXISTE');
            ELSE
                INSERT INTO PERSONA(COD_UUID, SEXO, EDAD, COD_UBIGEO)
                VALUES(P_COD_UUID, P_SEXO, P_EDAD, P_COD_UBIGEO);
            END IF;
        END IF;
    EXCEPTION
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001, 'ERROR AL INSERTAR LA PERSONA: ' || SQLERRM);
    END;
--
    PROCEDURE SP_MODIFICAR_PERSONA(P_SEXO PERSONA.SEXO%TYPE, P_EDAD PERSONA.EDAD%TYPE, P_COD_UBIGEO PERSONA.COD_UBIGEO%TYPE, P_COD_UUID PERSONA.COD_UUID%TYPE)
    IS
        V_UBIGEO_EXISTE NUMBER;
    BEGIN
        IF P_COD_UBIGEO IS NOT NULL THEN
            SELECT COUNT(1) INTO V_UBIGEO_EXISTE FROM DISTRITO WHERE COD_UBIGEO = P_COD_UBIGEO;
        
            IF V_UBIGEO_EXISTE = 0 THEN
                 RAISE_APPLICATION_ERROR(-20001, 'El COD_UBIGEO NO EXISTE');
            END IF;
        END IF;
        
        UPDATE PERSONA
        SET SEXO = NVL(P_SEXO, SEXO),
            EDAD = NVL(P_EDAD, EDAD),
            COD_UBIGEO = NVL(P_COD_UBIGEO, COD_UBIGEO)
        WHERE COD_UUID = P_COD_UUID;
                
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20001, 'NO SE ENCONTRO LA PERSONA CON ID: ' || P_COD_UUID);
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001, 'ERROR AL MODIFICAR LA PERSONA: ' || SQLERRM);
    END;
--
    PROCEDURE SP_ELIMINAR_PERSONA(P_COD_UUID PERSONA.COD_UUID%TYPE)
    IS
    BEGIN
        DELETE PERSONA WHERE COD_UUID = P_COD_UUID;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20001, 'NO SE ENCONTRO LA PERSONA CON ID: ' || P_COD_UUID);
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001, 'ERROR AL ELIMINAR LA PERSONA: ' || SQLERRM);
    END;
--
END;






-- CREACION DEL ENCABEZADO DEL PAQUETE PQ_MANTENIMIENTO_POSITIVOS

CREATE OR REPLACE PACKAGE PQ_MANTENIMIENTO_POSITIVOS
IS
--
	PROCEDURE SP_INSERTAR_POSITIVOS(P_COD_UUID PERSONA.COD_UUID%TYPE,  P_COD_METODO METODO_DETECCION.COD_METODO%TYPE, P_FECHA_RESULTADO CASOS_POSITIVOS.FECHA_RESULTADO%TYPE);
--
	PROCEDURE SP_MODIFICAR_POSITIVOS(P_COD_UUID PERSONA.COD_UUID%TYPE, P_COD_METODO METODO_DETECCION.COD_METODO%TYPE, P_FECHA_RESULTADO CASOS_POSITIVOS.FECHA_RESULTADO%TYPE, P_COD_CASO CASOS_POSITIVOS.COD_CASO%TYPE);
--
	PROCEDURE SP_ELIMINAR_POSITIVOS(P_COD_CASO CASOS_POSITIVOS.COD_CASO%TYPE);
--
END;


-- CREACION DEL CUERPO DEL PAQUETE PQ_MANTENIMIENTO_POSITIVOS
-- VERIFICACION PREVIA DE EXISTENCIA DE FOREIGN KEYS EN SUS RESPECTIVAS TABLAS
-- USO DE LA FUNCION NVL PARA MANEJAR VALORES NULOS

CREATE OR REPLACE PACKAGE BODY PQ_MANTENIMIENTO_POSITIVOS
IS
--
	PROCEDURE SP_INSERTAR_POSITIVOS(P_COD_UUID PERSONA.COD_UUID%TYPE,  P_COD_METODO METODO_DETECCION.COD_METODO%TYPE, P_FECHA_RESULTADO CASOS_POSITIVOS.FECHA_RESULTADO%TYPE)
	IS
		V_UUID_EXISTE NUMBER;
		V_METODO_EXISTE NUMBER;
	BEGIN
		IF P_COD_UUID IS NOT NULL AND P_COD_METODO IS NOT NULL THEN
			SELECT COUNT(1) INTO V_UUID_EXISTE FROM PERSONA WHERE COD_UUID = P_COD_UUID;
			SELECT COUNT(1) INTO V_METODO_EXISTE FROM METODO_DETECCION WHERE COD_METODO = P_COD_METODO;

			IF V_UUID_EXISTE = 0 AND V_METODO_EXISTE = 0 THEN
				RAISE_APPLICATION_ERROR(-20001, 'El P_COD_UUID Y P_COD_METODO NO EXISTE');
			ELSIF V_UUID_EXISTE = 0 AND V_METODO_EXISTE = 1 THEN
				RAISE_APPLICATION_ERROR(-20001, 'El P_COD_UUID NO EXISTE');
			ELSIF V_METODO_EXISTE = 0 AND V_UUID_EXISTE = 1 THEN
				RAISE_APPLICATION_ERROR(-20001, 'El P_COD_METODO NO EXISTE');
			ELSE
				INSERT INTO CASOS_POSITIVOS(COD_CASO, COD_UUID, COD_METODO, FECHA_RESULTADO)
				VALUES(SEQ_CASOS_POSITIVOS.NEXTVAL, P_COD_UUID, P_COD_METODO, P_FECHA_RESULTADO);
			END IF;
		END IF;
	EXCEPTION
		WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001, 'ERROR AL INSERTAR EL CASO POSITIVO: ' || SQLERRM);
	END;
--
	PROCEDURE SP_MODIFICAR_POSITIVOS(P_COD_UUID PERSONA.COD_UUID%TYPE, P_COD_METODO METODO_DETECCION.COD_METODO%TYPE, P_FECHA_RESULTADO CASOS_POSITIVOS.FECHA_RESULTADO%TYPE, P_COD_CASO CASOS_POSITIVOS.COD_CASO%TYPE)
	IS
		V_UUID_EXISTE NUMBER;
		V_METODO_EXISTE NUMBER;
	BEGIN
		IF P_COD_UUID IS NOT NULL AND P_COD_METODO IS NOT NULL THEN
			SELECT COUNT(1) INTO V_UUID_EXISTE FROM PERSONA WHERE COD_UUID = P_COD_UUID;
			SELECT COUNT(1) INTO V_METODO_EXISTE FROM METODO_DETECCION WHERE COD_METODO = P_COD_METODO;

			IF V_UUID_EXISTE = 0 AND V_METODO_EXISTE = 0 THEN
				RAISE_APPLICATION_ERROR(-20001, 'El P_COD_UUID Y P_COD_METODO NO EXISTE');
			ELSIF V_UUID_EXISTE = 0 AND V_METODO_EXISTE = 1 THEN
				RAISE_APPLICATION_ERROR(-20001, 'El P_COD_UUID NO EXISTE');
			ELSIF V_METODO_EXISTE = 0 AND V_UUID_EXISTE = 1 THEN
				RAISE_APPLICATION_ERROR(-20001, 'El P_COD_METODO NO EXISTE');
			ELSE
                --VERFIFICACION COMPLETA
                NULL;
			END IF;
		END IF;

		UPDATE CASOS_POSITIVOS
		SET COD_UUID = NVL(P_COD_UUID, COD_UUID),
		    COD_METODO = NVL(P_COD_METODO, COD_METODO),
		    FECHA_RESULTADO = NVL(P_FECHA_RESULTADO, FECHA_RESULTADO)
		WHERE COD_CASO = P_COD_CASO;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20001, 'NO SE ENCONTRO EL CASO POSITIVO CON ID: ' || TO_CHAR(P_COD_CASO));
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001, 'ERROR AL MODIFICAR EL CASO POSITIVO: ' || SQLERRM);
	END;
--
	PROCEDURE SP_ELIMINAR_POSITIVOS(P_COD_CASO CASOS_POSITIVOS.COD_CASO%TYPE)
	IS
	BEGIN
		DELETE CASOS_POSITIVOS WHERE COD_CASO = P_COD_CASO;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20001, 'NO SE ENCONTRO EL CASO POSITIVO CON ID: ' || TO_CHAR(P_COD_CASO));
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR(-20001, 'ERROR AL MODIFICAR EL CASO POSITIVO: ' || SQLERRM);
	END;
--
END;






-- CREACION DEL ENCABEZADO DEL PAQUETE PQ_MANTENIMIENTO_VACUNACION

CREATE OR REPLACE PACKAGE PQ_MANTENIMIENTO_VACUNACION
IS
--
	PROCEDURE SP_INSERTAR_VACUNACION(P_COD_UUID PERSONA.COD_UUID%TYPE, P_COD_DIRESA DIRESA.COD_DIRESA%TYPE, P_COD_UBIGEO DISTRITO.COD_UBIGEO%TYPE, P_COD_GRUPO GRUPO_RIESGO.COD_GRUPO%TYPE, 
                                   P_COD_FABRICANTE FABRICANTE.COD_FABRICANTE%TYPE, P_NUM_DOSIS REGISTRO_VACUNACION.NUM_DOSIS%TYPE, P_FECHA_VACUNACION REGISTRO_VACUNACION.FECHA_VACUNACION%TYPE, 
                                   P_CLASIFICACION_VACUNA REGISTRO_VACUNACION.CLASIFICACION_VACUNA%TYPE, P_TIPO_EDAD REGISTRO_VACUNACION.TIPO_EDAD%TYPE);
--
	PROCEDURE SP_MODIFICAR_VACUNACION(P_COD_UUID PERSONA.COD_UUID%TYPE, P_COD_DIRESA DIRESA.COD_DIRESA%TYPE, P_COD_UBIGEO DISTRITO.COD_UBIGEO%TYPE, P_COD_GRUPO GRUPO_RIESGO.COD_GRUPO%TYPE, 
                                    P_COD_FABRICANTE FABRICANTE.COD_FABRICANTE%TYPE, P_NUM_DOSIS REGISTRO_VACUNACION.NUM_DOSIS%TYPE, P_FECHA_VACUNACION REGISTRO_VACUNACION.FECHA_VACUNACION%TYPE, 
                                    P_CLASIFICACION_VACUNA REGISTRO_VACUNACION.CLASIFICACION_VACUNA%TYPE, P_TIPO_EDAD REGISTRO_VACUNACION.TIPO_EDAD%TYPE, P_COD_VACUNACION REGISTRO_VACUNACION.COD_VACUNACION%TYPE);
--
	PROCEDURE SP_ELIMINAR(P_COD_VACUNACION REGISTRO_VACUNACION.COD_VACUNACION%TYPE);
--
END;


-- CREACION DEL CUERPO DEL PAQUETE PQ_MANTENIMIENTO_VACUNACION
-- VERIFICACION PREVIA DE EXISTENCIA DE FOREIGN KEYS EN SUS RESPECTIVAS TABLAS
-- USO DE LA FUNCION NVL PARA MANEJAR VALORES NULOS

CREATE OR REPLACE PACKAGE BODY PQ_MANTENIMIENTO_VACUNACION
IS
--
	PROCEDURE SP_INSERTAR_VACUNACION(P_COD_UUID PERSONA.COD_UUID%TYPE, P_COD_DIRESA DIRESA.COD_DIRESA%TYPE, P_COD_UBIGEO DISTRITO.COD_UBIGEO%TYPE, P_COD_GRUPO GRUPO_RIESGO.COD_GRUPO%TYPE, 
                                   P_COD_FABRICANTE FABRICANTE.COD_FABRICANTE%TYPE, P_NUM_DOSIS REGISTRO_VACUNACION.NUM_DOSIS%TYPE, P_FECHA_VACUNACION REGISTRO_VACUNACION.FECHA_VACUNACION%TYPE, 
                                   P_CLASIFICACION_VACUNA REGISTRO_VACUNACION.CLASIFICACION_VACUNA%TYPE, P_TIPO_EDAD REGISTRO_VACUNACION.TIPO_EDAD%TYPE)
	IS
		V_UUID_EXISTE NUMBER;
		V_DIRESA_EXISTE NUMBER;
		V_UBIGEO_EXISTE NUMBER;
		V_GRUPO_EXISTE NUMBER;
		V_FABRICANTE_EXISTE NUMBER;
	BEGIN
		IF P_COD_UUID IS NOT NULL AND P_COD_DIRESA IS NOT NULL AND P_COD_UBIGEO IS NOT NULL AND P_COD_GRUPO IS NOT NULL AND P_COD_FABRICANTE IS NOT NULL THEN
			SELECT COUNT(1) INTO V_UUID_EXISTE FROM PERSONA WHERE COD_UUID = P_COD_UUID;
			SELECT COUNT(1) INTO V_DIRESA_EXISTE FROM DIRESA WHERE COD_DIRESA = P_COD_DIRESA;
			SELECT COUNT(1) INTO V_UBIGEO_EXISTE FROM DISTRITO WHERE COD_UBIGEO = P_COD_UBIGEO;
			SELECT COUNT(1) INTO V_GRUPO_EXISTE FROM GRUPO_RIESGO WHERE COD_GRUPO = P_COD_GRUPO;
			SELECT COUNT(1) INTO V_FABRICANTE_EXISTE FROM FABRICANTE WHERE COD_FABRICANTE = P_COD_FABRICANTE;

			IF V_UUID_EXISTE = 0 AND V_DIRESA_EXISTE = 0 AND V_UBIGEO_EXISTE = 0 AND V_GRUPO_EXISTE = 0 AND V_FABRICANTE_EXISTE = 0 THEN
				RAISE_APPLICATION_ERROR(-20001, 'COMBINACION DE CODIGO NO VALIDA');
			ELSIF V_UUID_EXISTE = 0 THEN
				RAISE_APPLICATION_ERROR(-20001, 'EL P_COD_UUID NO EXISTE');
			ELSIF V_DIRESA_EXISTE = 0 THEN
				RAISE_APPLICATION_ERROR(-20001, 'EL P_COD_DIRESA NO EXISTE');
			ELSIF V_UBIGEO_EXISTE = 0 THEN
				RAISE_APPLICATION_ERROR(-20001, 'EL P_COD_UBIGEO NO EXISTE');
			ELSIF V_GRUPO_EXISTE = 0 THEN
				RAISE_APPLICATION_ERROR(-20001, 'EL P_COD_GRUPO NO EXISTE');
			ELSIF V_FABRICANTE_EXISTE = 0 THEN
				RAISE_APPLICATION_ERROR(-20001, 'EL P_COD_FABRICANTE NO EXISTE');
			ELSE
				INSERT INTO REGISTRO_VACUNACION(COD_VACUNACION, COD_UUID, COD_DIRESA, COD_UBIGEO, COD_GRUPO, COD_FABRICANTE, NUM_DOSIS, FECHA_VACUNACION, CLASIFICACION_VACUNA, TIPO_EDAD)
				VALUES(SEQ_REGISTRO_VACUNACION.NEXTVAL, P_COD_UUID, P_COD_DIRESA, P_COD_UBIGEO, P_COD_GRUPO, P_COD_FABRICANTE, P_NUM_DOSIS, P_FECHA_VACUNACION, P_CLASIFICACION_VACUNA, P_TIPO_EDAD);
			END IF;
		END IF;
	EXCEPTION
		WHEN OTHERS THEN
			RAISE_APPLICATION_ERROR(-20001, 'ERROR AL INSERTAR UN REGISTRO DE VACUNACION: ' || SQLERRM);
	END;
--
	PROCEDURE SP_MODIFICAR_VACUNACION(P_COD_UUID PERSONA.COD_UUID%TYPE, P_COD_DIRESA DIRESA.COD_DIRESA%TYPE, P_COD_UBIGEO DISTRITO.COD_UBIGEO%TYPE, P_COD_GRUPO GRUPO_RIESGO.COD_GRUPO%TYPE, 
                                    P_COD_FABRICANTE FABRICANTE.COD_FABRICANTE%TYPE, P_NUM_DOSIS REGISTRO_VACUNACION.NUM_DOSIS%TYPE, P_FECHA_VACUNACION REGISTRO_VACUNACION.FECHA_VACUNACION%TYPE, 
                                    P_CLASIFICACION_VACUNA REGISTRO_VACUNACION.CLASIFICACION_VACUNA%TYPE, P_TIPO_EDAD REGISTRO_VACUNACION.TIPO_EDAD%TYPE, P_COD_VACUNACION REGISTRO_VACUNACION.COD_VACUNACION%TYPE)
	IS
		V_UUID_EXISTE NUMBER;
		V_DIRESA_EXISTE NUMBER;
		V_UBIGEO_EXISTE NUMBER;
		V_GRUPO_EXISTE NUMBER;
		V_FABRICANTE_EXISTE NUMBER;
	BEGIN
		IF P_COD_UUID IS NOT NULL AND P_COD_DIRESA IS NOT NULL AND P_COD_UBIGEO IS NOT NULL AND P_COD_GRUPO IS NOT NULL AND P_COD_FABRICANTE IS NOT NULL THEN
			SELECT COUNT(1) INTO V_UUID_EXISTE FROM PERSONA WHERE COD_UUID = P_COD_UUID;
			SELECT COUNT(1) INTO V_DIRESA_EXISTE FROM DIRESA WHERE COD_DIRESA = P_COD_DIRESA;
			SELECT COUNT(1) INTO V_UBIGEO_EXISTE FROM DISTRITO WHERE COD_UBIGEO = P_COD_UBIGEO;
			SELECT COUNT(1) INTO V_GRUPO_EXISTE FROM GRUPO_RIESGO WHERE COD_GRUPO = P_COD_GRUPO;
			SELECT COUNT(1) INTO V_FABRICANTE_EXISTE FROM FABRICANTE WHERE COD_FABRICANTE = P_COD_FABRICANTE;

			IF V_UUID_EXISTE = 0 AND V_DIRESA_EXISTE = 0 AND V_UBIGEO_EXISTE = 0 AND V_GRUPO_EXISTE = 0 AND V_FABRICANTE_EXISTE = 0 THEN
				RAISE_APPLICATION_ERROR(-20001, 'COMBINACION DE CODIGO NO VALIDA');
			ELSIF V_UUID_EXISTE = 0 THEN
				RAISE_APPLICATION_ERROR(-20001, 'EL P_COD_UUID NO EXISTE');
			ELSIF V_DIRESA_EXISTE = 0 THEN
				RAISE_APPLICATION_ERROR(-20001, 'EL P_COD_DIRESA NO EXISTE');
			ELSIF V_UBIGEO_EXISTE = 0 THEN
				RAISE_APPLICATION_ERROR(-20001, 'EL P_COD_UBIGEO NO EXISTE');
			ELSIF V_GRUPO_EXISTE = 0 THEN
				RAISE_APPLICATION_ERROR(-20001, 'EL P_COD_GRUPO NO EXISTE');
			ELSIF V_FABRICANTE_EXISTE = 0 THEN
				RAISE_APPLICATION_ERROR(-20001, 'EL P_COD_FABRICANTE NO EXISTE');
			ELSE
				--VERIFICACION COMPLETA
				NULL;
			END IF;
		END IF;

		UPDATE REGISTRO_VACUNACION
			SET
				COD_UUID = NVL(P_COD_UUID, COD_UUID),
				COD_DIRESA = NVL(P_COD_DIRESA, COD_DIRESA),
				COD_UBIGEO = NVL(P_COD_UBIGEO, COD_UBIGEO),
				COD_GRUPO = NVL(P_COD_GRUPO, COD_GRUPO),
				COD_FABRICANTE = NVL(P_COD_FABRICANTE, COD_FABRICANTE),
				NUM_DOSIS = NVL(P_NUM_DOSIS, NUM_DOSIS),
				FECHA_VACUNACION = NVL(P_FECHA_VACUNACION, FECHA_VACUNACION),
				CLASIFICACION_VACUNA = NVL(P_CLASIFICACION_VACUNA, CLASIFICACION_VACUNA),
				TIPO_EDAD = NVL(P_TIPO_EDAD, TIPO_EDAD)
			WHERE COD_VACUNACION = P_COD_VACUNACION;

	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			RAISE_APPLICATION_ERROR(-20001, 'NO SE ENCONTRO EL REGISTRO DE VACUNACION CON ID: ' || TO_CHAR(P_COD_VACUNACION));
		WHEN OTHERS THEN
			RAISE_APPLICATION_ERROR(-20001, 'ERROR AL MODIFICAR EL REGISTRO DE VACUNACION: ' || SQLERRM);
	END;
--
	PROCEDURE SP_ELIMINAR(P_COD_VACUNACION REGISTRO_VACUNACION.COD_VACUNACION%TYPE)
	IS
	BEGIN
		DELETE REGISTRO_VACUNACION WHERE COD_VACUNACION = P_COD_VACUNACION;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			RAISE_APPLICATION_ERROR(-20001, 'NO SE ENCONTRO EL REGISTRO DE VACUNACION CON ID: ' || TO_CHAR(P_COD_VACUNACION));
		WHEN OTHERS THEN
			RAISE_APPLICATION_ERROR(-20001, 'ERROR AL ELIMINAR EL REGISTRO DE VACUNACION: ' || SQLERRM);
	END;
--
END;
